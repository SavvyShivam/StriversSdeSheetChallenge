#include <bits/stdc++.h> 

bool mem(int index, int target, vector<int> &arr, vector<vector<int>> &dp){

    

    if (target==0) return true;

    

    if (index==0) return (arr[0]==target);

 

    if (dp[index][target] != -1) return dp[index][target];

    

    bool notTake = mem(index-1, target, arr, dp);

 

    bool Take = false;

    if (arr[index]<=target) Take = mem(index-1, target-arr[index], arr, dp);

 

    return dp[index][target] = Take | notTake;

}

 

bool tab(int n, int k, vector<int> &arr, vector<vector<bool>> &dp){

 

    for(int i=0; i<n; i++) dp[i][0]=true;

 

    dp[0][arr[0]] = true;

 

    for (int index=1; index<n; index++){

        for (int target=1; target<=k; target++){

            //if (dp[index][target] != -1) return dp[index][target];

            bool notTake = dp[index-1][target];

            bool Take = false;

            if (arr[index]<=target) Take = dp[index-1][target-arr[index]];

            dp[index][target] = Take | notTake;    

        }

    }
return dp[n-1][k];

}

 

bool subsetSumToK(int n, int k, vector<int> &arr) {

    // Write your code here.

    vector<vector<int>> dp(n, vector<int>(k+1, -1));

    vector<vector<bool>> dp2(n, vector<bool>(k+1, 0));

    //return f(n-1, k, arr, dp);

    return tab(n, k, arr, dp2);

    

}
